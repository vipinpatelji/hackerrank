#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);
int parse_int(char*);

typedef struct {
    int value;
    int index;
} Pair;

int compare_asc(const void* a, const void* b) {
    Pair* pa = (Pair*)a;
    Pair* pb = (Pair*)b;
    return pa->value - pb->value;
}

int compare_desc(const void* a, const void* b) {
    Pair* pa = (Pair*)a;
    Pair* pb = (Pair*)b;
    return pb->value - pa->value;
}

int count_swaps(int* arr, int n, bool ascending) {
    Pair* arr_pos = malloc(n * sizeof(Pair));
    for (int i = 0; i < n; i++) {
        arr_pos[i].value = arr[i];
        arr_pos[i].index = i;
    }

    if (ascending)
        qsort(arr_pos, n, sizeof(Pair), compare_asc);
    else
        qsort(arr_pos, n, sizeof(Pair), compare_desc);

    bool* visited = calloc(n, sizeof(bool));
    int swaps = 0;

    for (int i = 0; i < n; i++) {
        if (visited[i] || arr_pos[i].index == i)
            continue;

        int cycle_size = 0;
        int j = i;
        while (!visited[j]) {
            visited[j] = true;
            j = arr_pos[j].index;
            cycle_size++;
        }

        if (cycle_size > 0)
            swaps += (cycle_size - 1);
    }

    free(arr_pos);
    free(visited);
    return swaps;
}

int lilysHomework(int arr_count, int* arr) {
    int swaps_asc = count_swaps(arr, arr_count, true);
    int swaps_desc = count_swaps(arr, arr_count, false);
    return swaps_asc < swaps_desc ? swaps_asc : swaps_desc;
}

int main() {
    int n;
    scanf("%d", &n);

    int* arr = malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    int result = lilysHomework(n, arr);
    printf("%d\n", result);

    free(arr);
    return 0;
}


char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) break;
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') break;

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
        if (!data) return '\0';
    }

    if (data[data_length - 1] == '\n') data[data_length - 1] = '\0';
    return data;
}

char* ltrim(char* str) {
    if (!str) return '\0';
    while (*str != '\0' && isspace(*str)) str++;
    return str;
}

char* rtrim(char* str) {
    if (!str) return '\0';
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) end--;
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) return splits;
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);
    if (endptr == str || *endptr != '\0') exit(EXIT_FAILURE);
    return value;
}
