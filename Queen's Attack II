int queensAttack(int n, int k, int r_q, int c_q, int obstacles_rows, int obstacles_columns, int** obstacles) {
    int up = n - r_q;
    int down = r_q - 1;
    int right = n - c_q;
    int left = c_q - 1;
    int up_right = (n - r_q < n - c_q) ? (n - r_q) : (n - c_q);
    int up_left = (n - r_q < c_q - 1) ? (n - r_q) : (c_q - 1);
    int down_right = (r_q - 1 < n - c_q) ? (r_q - 1) : (n - c_q);
    int down_left = (r_q - 1 < c_q - 1) ? (r_q - 1) : (c_q - 1);
    for (int i = 0; i < obstacles_rows; i++) {
        int r_o = obstacles[i][0];
        int c_o = obstacles[i][1];
        if (c_o == c_q) {
            if (r_o > r_q) { 
                int dist = r_o - r_q - 1;
                if (dist < up) up = dist;
            } else if (r_o < r_q) { 
                int dist = r_q - r_o - 1;
                if (dist < down) down = dist;
            }
        }
        if (r_o == r_q) {
            if (c_o > c_q) {
                int dist = c_o - c_q - 1;
                if (dist < right) right = dist;
            } else if (c_o < c_q) {
                int dist = c_q - c_o - 1;
                if (dist < left) left = dist;
            }
        }
        if (abs(r_o - r_q) == abs(c_o - c_q)) {
            if (r_o > r_q && c_o > c_q) { 
                int dist = r_o - r_q - 1;
                if (dist < up_right) up_right = dist;
            } else if (r_o > r_q && c_o < c_q) { 
                int dist = r_o - r_q - 1;
                if (dist < up_left) up_left = dist;
            } else if (r_o < r_q && c_o > c_q) { 
                int dist = r_q - r_o - 1;   
                if (dist < down_right) down_right = dist;
            } else if (r_o < r_q && c_o < c_q) { 
                int dist = r_q - r_o - 1;
                if (dist < down_left) down_left = dist;
            }
        }
    }
    int total = up + down + left + right + up_right + up_left + down_right + down_left;
    return total;
}
